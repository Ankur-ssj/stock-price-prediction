{"ast":null,"code":"var _jsxFileName = \"D:\\\\Stock Price Prediction\\\\FrontEnd\\\\stock-price-prediction\\\\src\\\\Components\\\\Particles.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Suspense, useMemo, useCallback, useRef } from 'react';\nimport * as THREE from 'three';\n/* import {Button} from './Button'\r\nimport {Link} from 'react-router-dom' */\n\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\nimport Ellipse from '../Images/Ellipse.png';\nimport '../Scss/Workspace.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ngsap.registerPlugin(ScrollTrigger);\n\nfunction Points() {\n  _s();\n\n  const imgTex = useLoader(THREE.TextureLoader, Ellipse);\n  const bufferRef = useRef();\n  let t = 0;\n  let f = 0.0025;\n  let a = 1.2;\n  const graph = useCallback((x, z) => {\n    return Math.sin(f * (x ** 2 + z ** 2 + t)) * a;\n  }, [t, f, a]);\n  const count = 30;\n  const sep = 13.5;\n  let positions = useMemo(() => {\n    let positions = [];\n\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n        let x = sep * (xi - count / 2);\n        let z = sep * (zi - count / 2);\n        let y = graph(x, z);\n        positions.push(x, y, z);\n      }\n    }\n\n    return new Float32Array(positions);\n  }, [count, sep, graph]);\n  useFrame(() => {\n    t += 14;\n    const positions = bufferRef.current.array;\n    let i = 0;\n\n    for (let xi = 0; xi < count; xi++) {\n      for (let zi = 0; zi < count; zi++) {\n        let x = sep * (xi - count / 2);\n        let z = sep * (zi - count / 2);\n        positions[i + 1] = graph(x, z);\n        i += 3;\n      }\n    }\n\n    bufferRef.current.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"points\", {\n    children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n      attach: \"geometry\",\n      children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n        ref: bufferRef,\n        attachObject: ['attributes', 'position'],\n        array: positions,\n        count: positions.length / 3,\n        itemSize: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"pointsMaterial\", {\n      attach: \"material\",\n      map: imgTex,\n      size: 0.85,\n      sizeAttenuation: true,\n      transparent: false,\n      alphaTest: 0.5,\n      opacity: 1.0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Points, \"ZFKK6XaFpefMvNhgNO6lHhsFqmc=\", false, function () {\n  return [useLoader, useFrame];\n});\n\n_c = Points;\n\nfunction AnimationCanvas() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    colorManagement: false,\n    camera: {\n      position: [100, 1.5, 25.5],\n      fov: 75,\n      near: 0.01\n    },\n    children: /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: /*#__PURE__*/_jsxDEV(Points, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = AnimationCanvas;\n\nfunction WavePraticles() {\n  _s2();\n\n  const revealRefs = useRef(null);\n  revealRefs.current = [];\n  /*     useEffect(() => {\r\n  \r\n          revealRefs.current.forEach((el, index) =>{\r\n              gsap.fromTo(el, {\r\n                  autoAlpha: 0\r\n              }, {\r\n                  duration: 1, \r\n                  autoAlpha: 1, \r\n                  ease: 'none',\r\n                  scrollTrigger: {\r\n                      id: `sections-${index+1}`,\r\n                      trigger: el,\r\n                      start: 'top center+=1000',\r\n                      toggleActions: 'play none none reverse',\r\n                      markers: true\r\n                  }\r\n              })\r\n          });\r\n      }, []) */\n\n  const addToRefs = el => {\n    if (el && !revealRefs.current.includes(el)) {\n      revealRefs.current.push(el);\n    }\n\n    console.log(revealRefs.current);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"anim\",\n      children: /*#__PURE__*/_jsxDEV(Suspense, {\n        className: \"object\",\n        fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 56\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(AnimationCanvas, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(WavePraticles, \"R15uOaPaxDlrszdaqnPbVfL8ohw=\");\n\n_c3 = WavePraticles;\nexport default WavePraticles;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Points\");\n$RefreshReg$(_c2, \"AnimationCanvas\");\n$RefreshReg$(_c3, \"WavePraticles\");","map":{"version":3,"sources":["D:/Stock Price Prediction/FrontEnd/stock-price-prediction/src/Components/Particles.js"],"names":["React","Suspense","useMemo","useCallback","useRef","THREE","gsap","ScrollTrigger","Canvas","useFrame","useLoader","Ellipse","registerPlugin","Points","imgTex","TextureLoader","bufferRef","t","f","a","graph","x","z","Math","sin","count","sep","positions","xi","zi","y","push","Float32Array","current","array","i","needsUpdate","length","AnimationCanvas","position","fov","near","WavePraticles","revealRefs","addToRefs","el","includes","console","log"],"mappings":"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","sourcesContent":["import React, { Suspense, useMemo, useCallback, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n/* import {Button} from './Button'\r\nimport {Link} from 'react-router-dom' */\r\nimport {gsap} from 'gsap';\r\nimport {ScrollTrigger} from 'gsap/ScrollTrigger'\r\nimport {Canvas, useFrame, useLoader} from '@react-three/fiber';\r\nimport Ellipse from '../Images/Ellipse.png'\r\nimport '../Scss/Workspace.css'\r\n\r\ngsap.registerPlugin(ScrollTrigger);\r\n\r\nfunction Points(){\r\n    const imgTex = useLoader(THREE.TextureLoader, Ellipse);\r\n    const bufferRef = useRef();\r\n    let t = 0;\r\n    let f = 0.0025;\r\n    let a = 1.2;\r\n    const graph = useCallback(\r\n        (x, z) => {\r\n            return Math.sin(f * (x ** 2 + z ** 2 + t)) * a;\r\n        },\r\n        [t, f, a],\r\n    )\r\n\r\n    const count = 30\r\n    const sep = 13.5\r\n    let positions = useMemo(() => {\r\n      let positions = []\r\n  \r\n      for (let xi = 0; xi < count; xi++) {\r\n        for (let zi = 0; zi < count; zi++) {\r\n          let x = sep * (xi - count / 2);\r\n          let z = sep * (zi - count / 2);\r\n          let y = graph(x, z);\r\n          positions.push(x, y, z);\r\n        }\r\n      }\r\n  \r\n      return new Float32Array(positions);\r\n    }, [count, sep, graph])\r\n\r\n    useFrame(()=> {\r\n        t += 14\r\n        const positions = bufferRef.current.array;\r\n\r\n        let i = 0;\r\n        for (let xi = 0; xi < count; xi++) {\r\n            for (let zi = 0; zi < count; zi++) {\r\n              let x = sep * (xi - count / 2);\r\n              let z = sep * (zi - count / 2);\r\n              \r\n              positions[i + 1] = graph(x, z);\r\n              i += 3;\r\n            }\r\n          }\r\n\r\n        bufferRef.current.needsUpdate = true;\r\n    })\r\n\r\n    return(\r\n        <points>\r\n        <bufferGeometry attach=\"geometry\">\r\n          <bufferAttribute\r\n            ref={bufferRef}\r\n            attachObject={['attributes', 'position']}\r\n            array={positions}\r\n            count={positions.length / 3}\r\n            itemSize={3}\r\n          />\r\n        </bufferGeometry>\r\n  \r\n        <pointsMaterial\r\n          attach=\"material\"\r\n          map={imgTex}\r\n          size={0.85}\r\n          sizeAttenuation\r\n          transparent={false}\r\n          alphaTest={0.5}\r\n          opacity={1.0}\r\n        />\r\n      </points>\r\n    ); \r\n}\r\n\r\nfunction AnimationCanvas(){\r\n    return(\r\n        <Canvas\r\n            colorManagement = {false}\r\n            camera = {{position: [100, 1.5, 25.5], fov: 75, near: 0.01}}\r\n        >\r\n            <Suspense fallback={null}>\r\n                <Points/>\r\n            </Suspense>\r\n\r\n        </Canvas>\r\n    );\r\n}\r\n\r\nfunction WavePraticles(){\r\n\r\n    const revealRefs = useRef(null); \r\n    revealRefs.current = [];\r\n\r\n/*     useEffect(() => {\r\n\r\n        revealRefs.current.forEach((el, index) =>{\r\n            gsap.fromTo(el, {\r\n                autoAlpha: 0\r\n            }, {\r\n                duration: 1, \r\n                autoAlpha: 1, \r\n                ease: 'none',\r\n                scrollTrigger: {\r\n                    id: `sections-${index+1}`,\r\n                    trigger: el,\r\n                    start: 'top center+=1000',\r\n                    toggleActions: 'play none none reverse',\r\n                    markers: true\r\n                }\r\n            })\r\n        });\r\n    }, []) */\r\n\r\n    const addToRefs = (el) => {\r\n        if(el && !revealRefs.current.includes(el)){\r\n            revealRefs.current.push(el);\r\n        }\r\n        console.log(revealRefs.current);\r\n    };\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"anim\">\r\n                <Suspense className=\"object\" fallback={<div>Loading...</div>}>\r\n                    <AnimationCanvas />\r\n                </Suspense>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default WavePraticles\r\n   "]},"metadata":{},"sourceType":"module"}